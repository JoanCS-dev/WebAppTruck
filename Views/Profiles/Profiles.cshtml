@{
    ViewData["Title"] = "Profiles";
}

@await Html.PartialAsync("~/Views/Dashboard/Dashboard.cshtml")

<div id="Toast_alert" class="toast-container position-fixed top-0 end-0 p-3">
</div>
<main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
    <div
        class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2">Perfiles</h1>

        <div class="btn-toolbar mb-2 mb-md-0">

            <div class="btn-group me-2 ">

                <div class="dropdown">
                    <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" id="exportDropdown"
                        data-bs-toggle="dropdown" aria-expanded="false">Exportar</button>
                    <ul class="dropdown-menu" aria-labelledby="exportDropdown">
                        <li><a class="dropdown-item" href="#" id="exportExcel">Exportar a Excel</a></li>
                        <li><a class="dropdown-item" href="#" id="exportCSV">Exportar a CSV</a></li>
                        <li><a class="dropdown-item" href="#" id="exportCopy">Copiar al Portapapeles</a></li>
                        <li><a class="dropdown-item" href="#" id="exportPDF">Exportar a PDF</a></li>
                        <li><a class="dropdown-item" href="#" id="exportPrint">Imprimir</a></li>
                    </ul>
                </div>

            </div>
            <button type="button"
                class="btn btn-sm btn-outline-secondary dropdown-toggle d-flex align-items-center gap-1">
                <svg class="bi">
                    <use xlink:href="#calendar3" />
                </svg>
                This week
            </button>
        </div>

    </div>


    <div class="table-responsive small">
        <div class="m-3">
            <button type="button" class="btn btn-info btn-sm" id="btnProfiles"><svg xmlns="http://www.w3.org/2000/svg"
                    width="20" height="20" fill="currentColor" class="bi bi-person-fill-add" viewBox="0 0 16 16">
                    <path
                        d="M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7m.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0m-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0" />
                    <path
                        d="M2 13c0 1 1 1 1 1h5.256A4.5 4.5 0 0 1 8 12.5a4.5 4.5 0 0 1 1.544-3.393Q8.844 9.002 8 9c-5 0-6 3-6 4" />
                </svg> Perfil</button>
        </div>
        <table class="table table-striped table-hover display nowrap" id="tmainProfiles">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Descripción</th>
                    <th>Estatus</th>
                    <th>Fecha</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>

            </tbody>
        </table>
    </div>
</main>
</div>
</div>

<div class="modal fade" tabindex="-1" id="modalProfiles">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Perfiles</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="txtDescriptionP">Descripción</label>
                    <input type="hidden" id="_id_profiles_" value="0" />
                    <input type="text" id="txtDescriptionP" class="form-control" />
                </div>
                <div class="form-group form-check form-switch">
                    <label>Estatus</label>
                    <input type="checkbox" id="chkStatusP" class="form-check-input" />
                    <label class="form-check-label" for="chkStatus">Activo/Inactivo)</label>
                </div>
                <div class="form-group">
                    <label for="txtRDateP">Fecha</label>
                    <input type="datetime-local" id="txtRDateP" class="form-control" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="btnSaveProfiles">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>
@section JS {
    <script>

        cargarProfile();

        $("#btnProfiles").click(function () {
            LimpiarFormularioProfiles();
            $("#modalProfiles").modal("show");
        });

        $("#btnSaveProfiles").click(function () {
            const dateValue = $("#txtRDateP").val();
            const data_profile = {
                ProfileID: $("#_id_profiles_").val() || 0,
                ProDescription: $("#txtDescriptionP").val(),
                ProStatus: $("#chkStatusP").is(":checked") ? 1 : 0,
                ProRDate: dateValue ? new Date(dateValue).toISOString() : null
            };

            $.ajax({
                url: "/Profiles/AddUpdate",
                data: data_profile,
                type: "POST",
                success: function (res) {
                    if (res.ok) {
                        alert(res.message);
                        cargarProfile();
                        $("#modalProfiles").modal("hide");
                        LimpiarFormularioProfiles();
                    } else {
                        alert(res.message);
                    }
                },
                error: function () {
                    alert("Ocurrió un error interno, por favor inténtalo más tarde");
                }
            });
        });

        function cargarProfile() {
            $.ajax({
                url: "/Profiles/ListProfiles",
                type: "POST",
                dataType: "JSON",
                contentType: "application/json; charset=utf-8;",
                success: function (res) {
                    if (res.ok) {
                        LlenarTablaP(res.data);
                    } else {
                        alert(res.message);
                    }
                },
                error: function () {
                    alert("Ocurrió un error interno, por favor inténtalo más tarde");
                }
            });
        }

        function LlenarTablaP(lista) {
             if ($.fn.DataTable.isDataTable("#tmainProfiles")) {
                $("#tmainProfiles").DataTable().destroy();
            }

             $("#tmainProfiles tbody").remove();

            tabla = $("#tmainProfiles").DataTable({
                data: lista,
                columns: [
                    { data: "profileID" },
                    { data: "proDescription" },
                    { data: "proStatus" },
                    {
                        data: "proRDate", render: function (data) {

                            if (data) {
                                let timestampMatch = data.match(/\/Date\((\d+)\)\//);
                                if (timestampMatch) {
                                    let timestamp = parseInt(timestampMatch[1], 10);
                                    let date = new Date(timestamp);
                                    return date.toLocaleString('es-ES', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false });
                                } else {
                                    let date = new Date(data);
                                    if (isNaN(date.getTime())) {
                                        let parts = data.split(/[-T:.Z]/);
                                        date = new Date(Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3] || 0, parts[4] || 0, parts[5] || 0));
                                    }
                                    return !isNaN(date.getTime()) ? date.toLocaleString('es-ES', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false }) : 'Fecha inválida';
                                }
                            } else {
                                return '';
                            }
                        }
                    },
                    {
                        data: "profileID",
                        render: (value, type, row) => {
                            return `<button type='button' class='btn btn-warning m-1' onclick="ShowModalProfileEdit(${value});">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                                </svg>
                            </button>`;
                        }
                    }
                ],
                buttons: [
                    'excel', 'csv', 'copy', 'pdf', 'print'
                ],
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.10.24/i18n/Spanish.json'
                }
            });
        }

        function ShowModalProfileEdit(profileID) {
            const data_profile_id = {
                profileID: profileID
            };

            $.ajax({
                url: "/Profiles/ListProfiles",
                data: data_profile_id,
                type: "POST",
                success: function (res) {
                    if (res.ok && res.data.length > 0) {
                        const profile = res.data[0];
                        $("#_id_profiles_").val(profile.profileID);
                        $("#txtDescriptionP").val(profile.proDescription);
                        $("#chkStatusP").prop("checked", profile.proStatus);

                        let proRDate = profile.proRDate;
                        let date;

                        let timestampMatch = proRDate.match(/\/Date\((\d+)\)\//);
                        if (timestampMatch) {
                            let timestamp = parseInt(timestampMatch[1], 10);
                            date = new Date(timestamp);
                        } else {
                            date = new Date(proRDate);
                            if (isNaN(date.getTime())) {
                                let parts = proRDate.split(/[-T:.Z]/);
                                date = new Date(Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3] || 0, parts[4] || 0, parts[5] || 0));
                            }
                        }

                        if (!isNaN(date.getTime())) {
                            let isoDate = date.toISOString().slice(0, 16);
                            $("#txtRDateP").val(isoDate);
                        } else {
                            $("#txtRDateP").val('');
                        }

                        $("#modalProfiles").modal("show");
                    } else {
                        alert("No se encontraron datos para el perfil seleccionado.");
                    }
                },
                error: function () {
                    alert("Ocurrió un error interno, por favor inténtalo más tarde.");
                }
            });
        }

        function LimpiarFormularioProfiles() {
            $("#_id_profiles_").val(0);
            $("#txtDescriptionP").val("");
            $("#txtRDateP").val("");
        }

        $('#exportExcel').click(function () {
            tabla.button('.buttons-excel').trigger();
            mostrarToast("Exito", "Tu tabla se ha exportado en formato Excel con exito", "Descarga");
        });


        $('#exportCSV').click(function () {
            tabla.button('.buttons-csv').trigger();
            mostrarToast("Exito", "Tu tabla se ha exportado en formato CSV con exito", "Descarga");
        });


        $('#exportCopy').click(function () {
            mostrarToast("Exito", "Tu tabla se ha copiado en tu portapapeles con exito", "Descarga");
            tabla.button('.buttons-copy').trigger();
        });


        $('#exportPDF').click(function () {
            tabla.button('.buttons-pdf').trigger();
            mostrarToast("Exito", "Tu tabla se ha exportado en formato PDF con exito", "Descarga");
        });


        $('#exportPrint').click(function () {
            tabla.button('.buttons-print').trigger();
            mostrarToast("Exito", "Tu tabla esta lista para imprimir con exito", "Imprimir");
        });

        function mostrarToast(titulo, mensaje, tipo) {
            const toast = `
                    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="toast-header">
                            <strong class="me-auto">${titulo}</strong>
                            <small>${tipo}</small>
                            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                        <div class="toast-body">
                            ${mensaje}
                        </div>
                    </div>`;
            $("#Toast_alert").html(toast);
            $(".toast").toast("show");
        }

    </script>
}